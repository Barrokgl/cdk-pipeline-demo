"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineConstruct = void 0;
const core_1 = require("@aws-cdk/core");
const aws_codepipeline_1 = require("@aws-cdk/aws-codepipeline");
const aws_codepipeline_actions_1 = require("@aws-cdk/aws-codepipeline-actions");
const pipelines_1 = require("@aws-cdk/pipelines");
class PipelineConstruct {
    constructor(scope, props) {
        this.actions = [];
        this.scope = scope;
        this.id = props.id;
        this.sourceArtifact = new aws_codepipeline_1.Artifact();
        this.cloudAssemblyArtifact = new aws_codepipeline_1.Artifact();
        this.synthAction = pipelines_1.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: this.sourceArtifact,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            buildCommand: 'npm run build'
        });
        return this;
    }
    static of(scope, props) {
        return new PipelineConstruct(scope, props);
    }
    addGithubRepository({ secretName, owner, repo, branch = 'develop' }) {
        this.sourceAction = new aws_codepipeline_actions_1.GitHubSourceAction({
            actionName: 'GithubSource',
            output: this.sourceArtifact,
            oauthToken: core_1.SecretValue.secretsManager(secretName),
            owner,
            repo,
            branch,
        });
        return this;
    }
    addStage(stage) {
        this.stage = stage;
        return this;
    }
    addAction(fun) {
        this.actions.push(fun);
        return this;
    }
    addInvokeLambdaAction(lambda, params) {
        this.addAction((_, nextRunOrder) => new aws_codepipeline_actions_1.LambdaInvokeAction({
            lambda: lambda,
            actionName: `InvokeLambda`,
            userParameters: params,
            runOrder: nextRunOrder
        }));
        return this;
    }
    build() {
        this.pipeline = new pipelines_1.CdkPipeline(this.scope, this.id, {
            pipelineName: this.id,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            sourceAction: this.sourceAction,
            synthAction: this.synthAction,
        });
        if (this.stage !== undefined) {
            const appStage = this.pipeline.addApplicationStage(this.stage);
            appStage.nextSequentialRunOrder();
            this.actions.forEach(f => {
                appStage.addActions(f(this.pipeline, appStage.nextSequentialRunOrder()));
            });
        }
        return this;
    }
}
exports.PipelineConstruct = PipelineConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUuY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGlwZWxpbmUuY29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUE0RDtBQUM1RCxnRUFBNEQ7QUFDNUQsZ0ZBQWlHO0FBQ2pHLGtEQUFrRTtBQWVsRSxNQUFhLGlCQUFpQjtJQWtCMUIsWUFBb0IsS0FBZ0IsRUFBRSxLQUE2QjtRQVIzRCxZQUFPLEdBQW9FLEVBQUUsQ0FBQztRQVNsRixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLDJCQUFRLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSwyQkFBUSxFQUFFLENBQUM7UUFFNUMsSUFBSSxDQUFDLFdBQVcsR0FBRyw2QkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQztZQUNsRCxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtZQUNqRCxZQUFZLEVBQUUsZUFBZTtTQUNoQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBaEJELE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBZ0IsRUFBRSxLQUE2QjtRQUNyRCxPQUFPLElBQUksaUJBQWlCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFnQkQsbUJBQW1CLENBQUMsRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEdBQUcsU0FBUyxFQUFvQjtRQUNoRixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksNkNBQWtCLENBQUM7WUFDdkMsVUFBVSxFQUFFLGNBQWM7WUFDMUIsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQzNCLFVBQVUsRUFBRSxrQkFBVyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7WUFDbEQsS0FBSztZQUNMLElBQUk7WUFDSixNQUFNO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBNkQ7UUFDbkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELHFCQUFxQixDQUFDLE1BQWlCLEVBQUUsTUFBaUM7UUFFdEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksNkNBQWtCLENBQUM7WUFDdkQsTUFBTSxFQUFFLE1BQU07WUFDZCxVQUFVLEVBQUUsY0FBYztZQUMxQixjQUFjLEVBQUUsTUFBTTtZQUN0QixRQUFRLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQUMsQ0FBQztRQUNKLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHVCQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ2pELFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNyQixxQkFBcUIsRUFBRSxJQUFJLENBQUMscUJBQXFCO1lBQ2pELFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUMvQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDaEMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvRCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQTtZQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDckIsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDNUUsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSjtBQW5GRCw4Q0FtRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbnN0cnVjdCwgU2VjcmV0VmFsdWUsIFN0YWdlfSBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0IHtBcnRpZmFjdCwgSUFjdGlvbn0gZnJvbSBcIkBhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmVcIjtcbmltcG9ydCB7QWN0aW9uLCBHaXRIdWJTb3VyY2VBY3Rpb24sIExhbWJkYUludm9rZUFjdGlvbn0gZnJvbSBcIkBhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmUtYWN0aW9uc1wiO1xuaW1wb3J0IHtDZGtQaXBlbGluZSwgU2ltcGxlU3ludGhBY3Rpb259IGZyb20gXCJAYXdzLWNkay9waXBlbGluZXNcIjtcbmltcG9ydCB7SUZ1bmN0aW9ufSBmcm9tIFwiQGF3cy1jZGsvYXdzLWxhbWJkYVwiO1xuaW1wb3J0IHtwaXBlbGluZX0gZnJvbSBcInN0cmVhbVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBpcGVsaW5lQ29uc3RydWN0UHJvcHMge1xuICAgIGlkOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBHaXRodWJBY3Rpb25Qcm9wcyB7XG4gICAgc2VjcmV0TmFtZTogc3RyaW5nO1xuICAgIG93bmVyOiBzdHJpbmc7XG4gICAgcmVwbzogc3RyaW5nO1xuICAgIGJyYW5jaD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFBpcGVsaW5lQ29uc3RydWN0IHtcbiAgICByZWFkb25seSBzb3VyY2VBcnRpZmFjdDogQXJ0aWZhY3Q7XG4gICAgcmVhZG9ubHkgY2xvdWRBc3NlbWJseUFydGlmYWN0OiBBcnRpZmFjdDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2NvcGU6IENvbnN0cnVjdDtcbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBwaXBlbGluZTogQ2RrUGlwZWxpbmU7XG4gICAgcHJpdmF0ZSBzdGFnZTogU3RhZ2U7XG5cbiAgICBwcml2YXRlIGFjdGlvbnM6IEFycmF5PChwaXBlbGluZTogQ2RrUGlwZWxpbmUsIG5leHRSdW5PcmRlcjogbnVtYmVyKSA9PiBJQWN0aW9uPiA9IFtdO1xuICAgIHByaXZhdGUgc291cmNlQWN0aW9uOiBJQWN0aW9uO1xuICAgIHByaXZhdGUgc3ludGhBY3Rpb246IElBY3Rpb247XG5cbiAgICBzdGF0aWMgb2Yoc2NvcGU6IENvbnN0cnVjdCwgcHJvcHM6IFBpcGVsaW5lQ29uc3RydWN0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQaXBlbGluZUNvbnN0cnVjdChzY29wZSwgcHJvcHMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgcHJvcHM6IFBpcGVsaW5lQ29uc3RydWN0UHJvcHMpIHtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmlkID0gcHJvcHMuaWQ7XG4gICAgICAgIHRoaXMuc291cmNlQXJ0aWZhY3QgPSBuZXcgQXJ0aWZhY3QoKTtcbiAgICAgICAgdGhpcy5jbG91ZEFzc2VtYmx5QXJ0aWZhY3QgPSBuZXcgQXJ0aWZhY3QoKTtcblxuICAgICAgICB0aGlzLnN5bnRoQWN0aW9uID0gU2ltcGxlU3ludGhBY3Rpb24uc3RhbmRhcmROcG1TeW50aCh7XG4gICAgICAgICAgICBzb3VyY2VBcnRpZmFjdDogdGhpcy5zb3VyY2VBcnRpZmFjdCxcbiAgICAgICAgICAgIGNsb3VkQXNzZW1ibHlBcnRpZmFjdDogdGhpcy5jbG91ZEFzc2VtYmx5QXJ0aWZhY3QsXG4gICAgICAgICAgICBidWlsZENvbW1hbmQ6ICducG0gcnVuIGJ1aWxkJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkR2l0aHViUmVwb3NpdG9yeSh7c2VjcmV0TmFtZSwgb3duZXIsIHJlcG8sIGJyYW5jaCA9ICdkZXZlbG9wJ306IEdpdGh1YkFjdGlvblByb3BzKSB7XG4gICAgICAgIHRoaXMuc291cmNlQWN0aW9uID0gbmV3IEdpdEh1YlNvdXJjZUFjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25OYW1lOiAnR2l0aHViU291cmNlJyxcbiAgICAgICAgICAgIG91dHB1dDogdGhpcy5zb3VyY2VBcnRpZmFjdCxcbiAgICAgICAgICAgIG9hdXRoVG9rZW46IFNlY3JldFZhbHVlLnNlY3JldHNNYW5hZ2VyKHNlY3JldE5hbWUpLFxuICAgICAgICAgICAgb3duZXIsXG4gICAgICAgICAgICByZXBvLFxuICAgICAgICAgICAgYnJhbmNoLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkU3RhZ2Uoc3RhZ2U6IFN0YWdlKSB7XG4gICAgICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkQWN0aW9uKGZ1bjogKHBpcGVsaW5lOiBDZGtQaXBlbGluZSwgbmV4dFJ1bk9yZGVyOiBudW1iZXIpID0+IElBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5hY3Rpb25zLnB1c2goZnVuKVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGRJbnZva2VMYW1iZGFBY3Rpb24obGFtYmRhOiBJRnVuY3Rpb24sIHBhcmFtcz86IHtba2V5OiBzdHJpbmddOiB1bmtub3dufSkge1xuXG4gICAgICAgIHRoaXMuYWRkQWN0aW9uKChfLCBuZXh0UnVuT3JkZXIpID0+IG5ldyBMYW1iZGFJbnZva2VBY3Rpb24oe1xuICAgICAgICAgICAgbGFtYmRhOiBsYW1iZGEsXG4gICAgICAgICAgICBhY3Rpb25OYW1lOiBgSW52b2tlTGFtYmRhYCxcbiAgICAgICAgICAgIHVzZXJQYXJhbWV0ZXJzOiBwYXJhbXMsXG4gICAgICAgICAgICBydW5PcmRlcjogbmV4dFJ1bk9yZGVyXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIHRoaXMucGlwZWxpbmUgPSBuZXcgQ2RrUGlwZWxpbmUodGhpcy5zY29wZSwgdGhpcy5pZCwge1xuICAgICAgICAgICAgcGlwZWxpbmVOYW1lOiB0aGlzLmlkLFxuICAgICAgICAgICAgY2xvdWRBc3NlbWJseUFydGlmYWN0OiB0aGlzLmNsb3VkQXNzZW1ibHlBcnRpZmFjdCxcbiAgICAgICAgICAgIHNvdXJjZUFjdGlvbjogdGhpcy5zb3VyY2VBY3Rpb24sXG4gICAgICAgICAgICBzeW50aEFjdGlvbjogdGhpcy5zeW50aEFjdGlvbixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgYXBwU3RhZ2UgPSB0aGlzLnBpcGVsaW5lLmFkZEFwcGxpY2F0aW9uU3RhZ2UodGhpcy5zdGFnZSk7XG4gICAgICAgICAgICBhcHBTdGFnZS5uZXh0U2VxdWVudGlhbFJ1bk9yZGVyKClcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucy5mb3JFYWNoKGYgPT4ge1xuICAgICAgICAgICAgICAgIGFwcFN0YWdlLmFkZEFjdGlvbnMoZih0aGlzLnBpcGVsaW5lLCBhcHBTdGFnZS5uZXh0U2VxdWVudGlhbFJ1bk9yZGVyKCkpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineConstruct = void 0;
const core_1 = require("@aws-cdk/core");
const aws_codepipeline_1 = require("@aws-cdk/aws-codepipeline");
const aws_codepipeline_actions_1 = require("@aws-cdk/aws-codepipeline-actions");
const pipelines_1 = require("@aws-cdk/pipelines");
const aws_s3_1 = require("@aws-cdk/aws-s3");
const aws_cloudtrail_1 = require("@aws-cdk/aws-cloudtrail");
const aws_codebuild_1 = require("@aws-cdk/aws-codebuild");
class PipelineConstruct {
    constructor(scope, props) {
        this.preDeployActions = [];
        this.postDeployActions = [];
        this.scope = scope;
        this.id = props.id;
        this.sourceArtifact = new aws_codepipeline_1.Artifact();
        this.cloudAssemblyArtifact = new aws_codepipeline_1.Artifact();
        this.synthAction = pipelines_1.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: this.sourceArtifact,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            buildCommand: 'npm run build',
            environmentVariables: {
                'STAGE': {
                    type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT,
                    value: props.stage
                }
            }
        });
        return this;
    }
    static of(scope, props) {
        return new PipelineConstruct(scope, props);
    }
    addS3Source({ bucketName, bucketPath }) {
        const bucket = aws_s3_1.Bucket.fromBucketName(this.scope, bucketName, bucketName);
        const trail = new aws_cloudtrail_1.Trail(this.scope, `${this.id}-cloud-trail`);
        trail.addS3EventSelector([{ bucket, objectPrefix: bucket.arnForObjects('*') }], {
            readWriteType: aws_cloudtrail_1.ReadWriteType.WRITE_ONLY,
        });
        const rule = bucket.onCloudTrailPutObject(`${this.id}-event-rule`, {
            paths: [bucketPath]
        });
        this.sourceAction = new aws_codepipeline_actions_1.S3SourceAction({
            actionName: 'S3Source',
            bucketKey: bucketPath,
            bucket: bucket,
            output: this.sourceArtifact,
            trigger: aws_codepipeline_actions_1.S3Trigger.EVENTS,
        });
        return this;
    }
    addGithubRepository({ secretName, owner, repo, branch = 'develop' }) {
        this.sourceAction = new aws_codepipeline_actions_1.GitHubSourceAction({
            actionName: 'GithubSource',
            output: this.sourceArtifact,
            oauthToken: core_1.SecretValue.secretsManager(secretName),
            owner,
            repo,
            branch,
        });
        return this;
    }
    addPreDeployAction(fun) {
        this.preDeployActions.push(fun);
        return this;
    }
    addAppStage(stage) {
        this.stage = stage;
        return this;
    }
    addPostDeployAction(fun) {
        this.postDeployActions.push(fun);
        return this;
    }
    // addInvokeLambdaAction(lambda: IFunction, params?: {[key: string]: unknown}) {
    //
    //     this.addPostDeployAction((_, nextRunOrder) => new LambdaInvokeAction({
    //         lambda: lambda,
    //         actionName: `InvokeLambda`,
    //         userParameters: params,
    //         runOrder: nextRunOrder
    //     }));
    //     return this;
    // }
    build() {
        this.pipeline = new pipelines_1.CdkPipeline(this.scope, this.id, {
            pipelineName: this.id,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            sourceAction: this.sourceAction,
            synthAction: this.synthAction,
        });
        if (this.preDeployActions.length > 0) {
            const preDeploy = this.pipeline.addStage('PreDeploy');
            this.preDeployActions.forEach(f => {
                preDeploy.addActions(f(this.pipeline, preDeploy.nextSequentialRunOrder()));
            });
        }
        if (this.stage !== undefined) {
            this.pipeline.addApplicationStage(this.stage);
        }
        if (this.postDeployActions.length > 0) {
            this.postDeployActions.forEach(f => {
                const postDeploy = this.pipeline.addStage('PostDeploy');
                postDeploy.addActions(f(this.pipeline, postDeploy.nextSequentialRunOrder()));
            });
        }
        return this;
    }
}
exports.PipelineConstruct = PipelineConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUuY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGlwZWxpbmUuY29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUE0RDtBQUM1RCxnRUFBNEQ7QUFDNUQsZ0ZBQW9IO0FBQ3BILGtEQUFrRTtBQUVsRSw0Q0FBdUM7QUFDdkMsNERBQTZEO0FBQzdELDBEQUFvRTtBQW1CcEUsTUFBYSxpQkFBaUI7SUFtQjFCLFlBQW9CLEtBQWdCLEVBQUUsS0FBNkI7UUFUM0QscUJBQWdCLEdBQW9FLEVBQUUsQ0FBQztRQUN2RixzQkFBaUIsR0FBb0UsRUFBRSxDQUFDO1FBUzVGLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksMkJBQVEsRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLDJCQUFRLEVBQUUsQ0FBQztRQUU1QyxJQUFJLENBQUMsV0FBVyxHQUFHLDZCQUFpQixDQUFDLGdCQUFnQixDQUFDO1lBQ2xELGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztZQUNuQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMscUJBQXFCO1lBQ2pELFlBQVksRUFBRSxlQUFlO1lBQzdCLG9CQUFvQixFQUFFO2dCQUNsQixPQUFPLEVBQUU7b0JBQ0wsSUFBSSxFQUFFLDRDQUE0QixDQUFDLFNBQVM7b0JBQzVDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztpQkFDckI7YUFDSjtTQUNKLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUF0QkQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFnQixFQUFFLEtBQTZCO1FBQ3JELE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJ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QUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzlCLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9FLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUMvQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDeEQsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDaEYsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSjtBQWhJRCw4Q0FnSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbnN0cnVjdCwgU2VjcmV0VmFsdWUsIFN0YWdlfSBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0IHtBcnRpZmFjdCwgSUFjdGlvbn0gZnJvbSBcIkBhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmVcIjtcbmltcG9ydCB7R2l0SHViU291cmNlQWN0aW9uLCBMYW1iZGFJbnZva2VBY3Rpb24sIFMzU291cmNlQWN0aW9uLCBTM1RyaWdnZXJ9IGZyb20gXCJAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lLWFjdGlvbnNcIjtcbmltcG9ydCB7Q2RrUGlwZWxpbmUsIFNpbXBsZVN5bnRoQWN0aW9ufSBmcm9tIFwiQGF3cy1jZGsvcGlwZWxpbmVzXCI7XG5pbXBvcnQge0lGdW5jdGlvbn0gZnJvbSBcIkBhd3MtY2RrL2F3cy1sYW1iZGFcIjtcbmltcG9ydCB7QnVja2V0fSBmcm9tIFwiQGF3cy1jZGsvYXdzLXMzXCI7XG5pbXBvcnQge1JlYWRXcml0ZVR5cGUsIFRyYWlsfSBmcm9tIFwiQGF3cy1jZGsvYXdzLWNsb3VkdHJhaWxcIjtcbmltcG9ydCB7QnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZX0gZnJvbSBcIkBhd3MtY2RrL2F3cy1jb2RlYnVpbGRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQaXBlbGluZUNvbnN0cnVjdFByb3BzIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHN0YWdlOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBHaXRodWJBY3Rpb25Qcm9wcyB7XG4gICAgc2VjcmV0TmFtZTogc3RyaW5nO1xuICAgIG93bmVyOiBzdHJpbmc7XG4gICAgcmVwbzogc3RyaW5nO1xuICAgIGJyYW5jaD86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFMzU291cmNlIHtcbiAgICBidWNrZXROYW1lOiBzdHJpbmc7XG4gICAgYnVja2V0UGF0aDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgUGlwZWxpbmVDb25zdHJ1Y3Qge1xuICAgIHJlYWRvbmx5IHNvdXJjZUFydGlmYWN0OiBBcnRpZmFjdDtcbiAgICByZWFkb25seSBjbG91ZEFzc2VtYmx5QXJ0aWZhY3Q6IEFydGlmYWN0O1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBzY29wZTogQ29uc3RydWN0O1xuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIHBpcGVsaW5lOiBDZGtQaXBlbGluZTtcbiAgICBwcml2YXRlIHN0YWdlOiBTdGFnZTtcblxuICAgIHByaXZhdGUgcHJlRGVwbG95QWN0aW9uczogQXJyYXk8KHBpcGVsaW5lOiBDZGtQaXBlbGluZSwgbmV4dFJ1bk9yZGVyOiBudW1iZXIpID0+IElBY3Rpb24+ID0gW107XG4gICAgcHJpdmF0ZSBwb3N0RGVwbG95QWN0aW9uczogQXJyYXk8KHBpcGVsaW5lOiBDZGtQaXBlbGluZSwgbmV4dFJ1bk9yZGVyOiBudW1iZXIpID0+IElBY3Rpb24+ID0gW107XG4gICAgcHJpdmF0ZSBzb3VyY2VBY3Rpb246IElBY3Rpb247XG4gICAgcHJpdmF0ZSBzeW50aEFjdGlvbjogSUFjdGlvbjtcblxuICAgIHN0YXRpYyBvZihzY29wZTogQ29uc3RydWN0LCBwcm9wczogUGlwZWxpbmVDb25zdHJ1Y3RQcm9wcykge1xuICAgICAgICByZXR1cm4gbmV3IFBpcGVsaW5lQ29uc3RydWN0KHNjb3BlLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBwcm9wczogUGlwZWxpbmVDb25zdHJ1Y3RQcm9wcykge1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBwcm9wcy5pZDtcbiAgICAgICAgdGhpcy5zb3VyY2VBcnRpZmFjdCA9IG5ldyBBcnRpZmFjdCgpO1xuICAgICAgICB0aGlzLmNsb3VkQXNzZW1ibHlBcnRpZmFjdCA9IG5ldyBBcnRpZmFjdCgpO1xuXG4gICAgICAgIHRoaXMuc3ludGhBY3Rpb24gPSBTaW1wbGVTeW50aEFjdGlvbi5zdGFuZGFyZE5wbVN5bnRoKHtcbiAgICAgICAgICAgIHNvdXJjZUFydGlmYWN0OiB0aGlzLnNvdXJjZUFydGlmYWN0LFxuICAgICAgICAgICAgY2xvdWRBc3NlbWJseUFydGlmYWN0OiB0aGlzLmNsb3VkQXNzZW1ibHlBcnRpZmFjdCxcbiAgICAgICAgICAgIGJ1aWxkQ29tbWFuZDogJ25wbSBydW4gYnVpbGQnLFxuICAgICAgICAgICAgZW52aXJvbm1lbnRWYXJpYWJsZXM6IHtcbiAgICAgICAgICAgICAgICAnU1RBR0UnOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuUExBSU5URVhULFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcHJvcHMuc3RhZ2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGRTM1NvdXJjZSh7YnVja2V0TmFtZSwgYnVja2V0UGF0aH06IFMzU291cmNlKSB7XG4gICAgICAgIGNvbnN0IGJ1Y2tldCA9IEJ1Y2tldC5mcm9tQnVja2V0TmFtZSh0aGlzLnNjb3BlLCBidWNrZXROYW1lLCBidWNrZXROYW1lKVxuXG4gICAgICAgIGNvbnN0IHRyYWlsID0gbmV3IFRyYWlsKHRoaXMuc2NvcGUsIGAke3RoaXMuaWR9LWNsb3VkLXRyYWlsYCk7XG5cbiAgICAgICAgdHJhaWwuYWRkUzNFdmVudFNlbGVjdG9yKFt7YnVja2V0LCBvYmplY3RQcmVmaXg6IGJ1Y2tldC5hcm5Gb3JPYmplY3RzKCcqJyl9XSwge1xuICAgICAgICAgICAgcmVhZFdyaXRlVHlwZTogUmVhZFdyaXRlVHlwZS5XUklURV9PTkxZLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBydWxlID0gYnVja2V0Lm9uQ2xvdWRUcmFpbFB1dE9iamVjdChgJHt0aGlzLmlkfS1ldmVudC1ydWxlYCwge1xuICAgICAgICAgICAgcGF0aHM6IFtidWNrZXRQYXRoXVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNvdXJjZUFjdGlvbiA9IG5ldyBTM1NvdXJjZUFjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25OYW1lOiAnUzNTb3VyY2UnLFxuICAgICAgICAgICAgYnVja2V0S2V5OiBidWNrZXRQYXRoLFxuICAgICAgICAgICAgYnVja2V0OiBidWNrZXQsXG4gICAgICAgICAgICBvdXRwdXQ6IHRoaXMuc291cmNlQXJ0aWZhY3QsXG4gICAgICAgICAgICB0cmlnZ2VyOiBTM1RyaWdnZXIuRVZFTlRTLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkR2l0aHViUmVwb3NpdG9yeSh7c2VjcmV0TmFtZSwgb3duZXIsIHJlcG8sIGJyYW5jaCA9ICdkZXZlbG9wJ306IEdpdGh1YkFjdGlvblByb3BzKSB7XG4gICAgICAgIHRoaXMuc291cmNlQWN0aW9uID0gbmV3IEdpdEh1YlNvdXJjZUFjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25OYW1lOiAnR2l0aHViU291cmNlJyxcbiAgICAgICAgICAgIG91dHB1dDogdGhpcy5zb3VyY2VBcnRpZmFjdCxcbiAgICAgICAgICAgIG9hdXRoVG9rZW46IFNlY3JldFZhbHVlLnNlY3JldHNNYW5hZ2VyKHNlY3JldE5hbWUpLFxuICAgICAgICAgICAgb3duZXIsXG4gICAgICAgICAgICByZXBvLFxuICAgICAgICAgICAgYnJhbmNoLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkUHJlRGVwbG95QWN0aW9uKGZ1bjogKHBpcGVsaW5lOiBDZGtQaXBlbGluZSwgbmV4dFJ1bk9yZGVyOiBudW1iZXIpID0+IElBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5wcmVEZXBsb3lBY3Rpb25zLnB1c2goZnVuKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkQXBwU3RhZ2Uoc3RhZ2U6IFN0YWdlKSB7XG4gICAgICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkUG9zdERlcGxveUFjdGlvbihmdW46IChwaXBlbGluZTogQ2RrUGlwZWxpbmUsIG5leHRSdW5PcmRlcjogbnVtYmVyKSA9PiBJQWN0aW9uKSB7XG4gICAgICAgIHRoaXMucG9zdERlcGxveUFjdGlvbnMucHVzaChmdW4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhZGRJbnZva2VMYW1iZGFBY3Rpb24obGFtYmRhOiBJRnVuY3Rpb24sIHBhcmFtcz86IHtba2V5OiBzdHJpbmddOiB1bmtub3dufSkge1xuICAgIC8vXG4gICAgLy8gICAgIHRoaXMuYWRkUG9zdERlcGxveUFjdGlvbigoXywgbmV4dFJ1bk9yZGVyKSA9PiBuZXcgTGFtYmRhSW52b2tlQWN0aW9uKHtcbiAgICAvLyAgICAgICAgIGxhbWJkYTogbGFtYmRhLFxuICAgIC8vICAgICAgICAgYWN0aW9uTmFtZTogYEludm9rZUxhbWJkYWAsXG4gICAgLy8gICAgICAgICB1c2VyUGFyYW1ldGVyczogcGFyYW1zLFxuICAgIC8vICAgICAgICAgcnVuT3JkZXI6IG5leHRSdW5PcmRlclxuICAgIC8vICAgICB9KSk7XG4gICAgLy8gICAgIHJldHVybiB0aGlzO1xuICAgIC8vIH1cblxuICAgIGJ1aWxkKCkge1xuICAgICAgICB0aGlzLnBpcGVsaW5lID0gbmV3IENka1BpcGVsaW5lKHRoaXMuc2NvcGUsIHRoaXMuaWQsIHtcbiAgICAgICAgICAgIHBpcGVsaW5lTmFtZTogdGhpcy5pZCxcbiAgICAgICAgICAgIGNsb3VkQXNzZW1ibHlBcnRpZmFjdDogdGhpcy5jbG91ZEFzc2VtYmx5QXJ0aWZhY3QsXG4gICAgICAgICAgICBzb3VyY2VBY3Rpb246IHRoaXMuc291cmNlQWN0aW9uLFxuICAgICAgICAgICAgc3ludGhBY3Rpb246IHRoaXMuc3ludGhBY3Rpb24sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnByZURlcGxveUFjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcHJlRGVwbG95ID0gdGhpcy5waXBlbGluZS5hZGRTdGFnZSgnUHJlRGVwbG95Jyk7XG4gICAgICAgICAgICB0aGlzLnByZURlcGxveUFjdGlvbnMuZm9yRWFjaChmID0+IHtcbiAgICAgICAgICAgICAgICBwcmVEZXBsb3kuYWRkQWN0aW9ucyhmKHRoaXMucGlwZWxpbmUsIHByZURlcGxveS5uZXh0U2VxdWVudGlhbFJ1bk9yZGVyKCkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5waXBlbGluZS5hZGRBcHBsaWNhdGlvblN0YWdlKHRoaXMuc3RhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucG9zdERlcGxveUFjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5wb3N0RGVwbG95QWN0aW9ucy5mb3JFYWNoKGYgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc3REZXBsb3kgPSB0aGlzLnBpcGVsaW5lLmFkZFN0YWdlKCdQb3N0RGVwbG95Jyk7XG4gICAgICAgICAgICAgICAgcG9zdERlcGxveS5hZGRBY3Rpb25zKGYodGhpcy5waXBlbGluZSwgcG9zdERlcGxveS5uZXh0U2VxdWVudGlhbFJ1bk9yZGVyKCkpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineConstruct = void 0;
const core_1 = require("@aws-cdk/core");
const aws_codepipeline_1 = require("@aws-cdk/aws-codepipeline");
const aws_codepipeline_actions_1 = require("@aws-cdk/aws-codepipeline-actions");
const pipelines_1 = require("@aws-cdk/pipelines");
class PipelineConstruct {
    constructor(scope, props) {
        this.actions = [];
        this.scope = scope;
        this.id = props.id;
        this.sourceArtifact = new aws_codepipeline_1.Artifact();
        this.cloudAssemblyArtifact = new aws_codepipeline_1.Artifact();
        this.synthAction = pipelines_1.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: this.sourceArtifact,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            buildCommand: 'npm run build'
        });
        return this;
    }
    static of(scope, props) {
        return new PipelineConstruct(scope, props);
    }
    addGithubRepository({ secretName, owner, repo, branch = 'develop' }) {
        this.sourceAction = new aws_codepipeline_actions_1.GitHubSourceAction({
            actionName: 'GithubSource',
            output: this.sourceArtifact,
            oauthToken: core_1.SecretValue.secretsManager(secretName),
            owner,
            repo,
            branch,
        });
        return this;
    }
    addStage(stage) {
        this.stage = stage;
        return this;
    }
    addAction(fun) {
        this.actions.push(fun);
        return this;
    }
    addInvokeLambdaAction(lambda, params) {
        this.addAction((_, nextRunOrder) => new aws_codepipeline_actions_1.LambdaInvokeAction({
            lambda: lambda,
            actionName: `InvokeLambda`,
            userParameters: params,
            runOrder: nextRunOrder
        }));
        return this;
    }
    build() {
        this.pipeline = new pipelines_1.CdkPipeline(this.scope, this.id, {
            pipelineName: this.id,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            sourceAction: this.sourceAction,
            synthAction: this.synthAction,
            crossAccountKeys: false
        });
        if (this.stage !== undefined) {
            const appStage = this.pipeline.addApplicationStage(this.stage);
            appStage.nextSequentialRunOrder();
            this.actions.forEach(f => {
                appStage.addActions(f(this.pipeline, appStage.nextSequentialRunOrder()));
            });
        }
        return this;
    }
}
exports.PipelineConstruct = PipelineConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUuY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGlwZWxpbmUuY29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUE0RDtBQUM1RCxnRUFBNEQ7QUFDNUQsZ0ZBQWlHO0FBQ2pHLGtEQUFrRTtBQWVsRSxNQUFhLGlCQUFpQjtJQWtCMUIsWUFBb0IsS0FBZ0IsRUFBRSxLQUE2QjtRQVIzRCxZQUFPLEdBQW9FLEVBQUUsQ0FBQztRQVNsRixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLDJCQUFRLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSwyQkFBUSxFQUFFLENBQUM7UUFFNUMsSUFBSSxDQUFDLFdBQVcsR0FBRyw2QkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQztZQUNsRCxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtZQUNqRCxZQUFZLEVBQUUsZUFBZTtTQUNoQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBaEJELE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBZ0IsRUFBRSxLQUE2QjtRQUNyRCxPQUFPLElBQUksaUJBQWlCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFnQkQsbUJBQW1CLENBQUMsRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEdBQUcsU0FBUyxFQUFvQjtRQUNoRixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksNkNBQWtCLENBQUM7WUFDdkMsVUFBVSxFQUFFLGNBQWM7WUFDMUIsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQzNCLFVBQVUsRUFBRSxrQkFBVyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7WUFDbEQsS0FBSztZQUNMLElBQUk7WUFDSixNQUFNO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBNkQ7UUFDbkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELHFCQUFxQixDQUFDLE1BQWlCLEVBQUUsTUFBaUM7UUFFdEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksNkNBQWtCLENBQUM7WUFDdkQsTUFBTSxFQUFFLE1BQU07WUFDZCxVQUFVLEVBQUUsY0FBYztZQUMxQixjQUFjLEVBQUUsTUFBTTtZQUN0QixRQUFRLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQUMsQ0FBQztRQUNKLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHVCQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ2pELFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNyQixxQkFBcUIsRUFBRSxJQUFJLENBQUMscUJBQXFCO1lBQ2pELFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUMvQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsZ0JBQWdCLEVBQUUsS0FBSztTQUMxQixDQUFDLENBQUM7UUFFSCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQzFCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9ELFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFBO1lBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNyQixRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUM1RSxDQUFDLENBQUMsQ0FBQztTQUNOO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBcEZELDhDQW9GQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uc3RydWN0LCBTZWNyZXRWYWx1ZSwgU3RhZ2V9IGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5pbXBvcnQge0FydGlmYWN0LCBJQWN0aW9ufSBmcm9tIFwiQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZVwiO1xuaW1wb3J0IHtBY3Rpb24sIEdpdEh1YlNvdXJjZUFjdGlvbiwgTGFtYmRhSW52b2tlQWN0aW9ufSBmcm9tIFwiQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZS1hY3Rpb25zXCI7XG5pbXBvcnQge0Nka1BpcGVsaW5lLCBTaW1wbGVTeW50aEFjdGlvbn0gZnJvbSBcIkBhd3MtY2RrL3BpcGVsaW5lc1wiO1xuaW1wb3J0IHtJRnVuY3Rpb259IGZyb20gXCJAYXdzLWNkay9hd3MtbGFtYmRhXCI7XG5pbXBvcnQge3BpcGVsaW5lfSBmcm9tIFwic3RyZWFtXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlwZWxpbmVDb25zdHJ1Y3RQcm9wcyB7XG4gICAgaWQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEdpdGh1YkFjdGlvblByb3BzIHtcbiAgICBzZWNyZXROYW1lOiBzdHJpbmc7XG4gICAgb3duZXI6IHN0cmluZztcbiAgICByZXBvOiBzdHJpbmc7XG4gICAgYnJhbmNoPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgUGlwZWxpbmVDb25zdHJ1Y3Qge1xuICAgIHJlYWRvbmx5IHNvdXJjZUFydGlmYWN0OiBBcnRpZmFjdDtcbiAgICByZWFkb25seSBjbG91ZEFzc2VtYmx5QXJ0aWZhY3Q6IEFydGlmYWN0O1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBzY29wZTogQ29uc3RydWN0O1xuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIHBpcGVsaW5lOiBDZGtQaXBlbGluZTtcbiAgICBwcml2YXRlIHN0YWdlOiBTdGFnZTtcblxuICAgIHByaXZhdGUgYWN0aW9uczogQXJyYXk8KHBpcGVsaW5lOiBDZGtQaXBlbGluZSwgbmV4dFJ1bk9yZGVyOiBudW1iZXIpID0+IElBY3Rpb24+ID0gW107XG4gICAgcHJpdmF0ZSBzb3VyY2VBY3Rpb246IElBY3Rpb247XG4gICAgcHJpdmF0ZSBzeW50aEFjdGlvbjogSUFjdGlvbjtcblxuICAgIHN0YXRpYyBvZihzY29wZTogQ29uc3RydWN0LCBwcm9wczogUGlwZWxpbmVDb25zdHJ1Y3RQcm9wcykge1xuICAgICAgICByZXR1cm4gbmV3IFBpcGVsaW5lQ29uc3RydWN0KHNjb3BlLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBwcm9wczogUGlwZWxpbmVDb25zdHJ1Y3RQcm9wcykge1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaWQgPSBwcm9wcy5pZDtcbiAgICAgICAgdGhpcy5zb3VyY2VBcnRpZmFjdCA9IG5ldyBBcnRpZmFjdCgpO1xuICAgICAgICB0aGlzLmNsb3VkQXNzZW1ibHlBcnRpZmFjdCA9IG5ldyBBcnRpZmFjdCgpO1xuXG4gICAgICAgIHRoaXMuc3ludGhBY3Rpb24gPSBTaW1wbGVTeW50aEFjdGlvbi5zdGFuZGFyZE5wbVN5bnRoKHtcbiAgICAgICAgICAgIHNvdXJjZUFydGlmYWN0OiB0aGlzLnNvdXJjZUFydGlmYWN0LFxuICAgICAgICAgICAgY2xvdWRBc3NlbWJseUFydGlmYWN0OiB0aGlzLmNsb3VkQXNzZW1ibHlBcnRpZmFjdCxcbiAgICAgICAgICAgIGJ1aWxkQ29tbWFuZDogJ25wbSBydW4gYnVpbGQnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGRHaXRodWJSZXBvc2l0b3J5KHtzZWNyZXROYW1lLCBvd25lciwgcmVwbywgYnJhbmNoID0gJ2RldmVsb3AnfTogR2l0aHViQWN0aW9uUHJvcHMpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VBY3Rpb24gPSBuZXcgR2l0SHViU291cmNlQWN0aW9uKHtcbiAgICAgICAgICAgIGFjdGlvbk5hbWU6ICdHaXRodWJTb3VyY2UnLFxuICAgICAgICAgICAgb3V0cHV0OiB0aGlzLnNvdXJjZUFydGlmYWN0LFxuICAgICAgICAgICAgb2F1dGhUb2tlbjogU2VjcmV0VmFsdWUuc2VjcmV0c01hbmFnZXIoc2VjcmV0TmFtZSksXG4gICAgICAgICAgICBvd25lcixcbiAgICAgICAgICAgIHJlcG8sXG4gICAgICAgICAgICBicmFuY2gsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGRTdGFnZShzdGFnZTogU3RhZ2UpIHtcbiAgICAgICAgdGhpcy5zdGFnZSA9IHN0YWdlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGRBY3Rpb24oZnVuOiAocGlwZWxpbmU6IENka1BpcGVsaW5lLCBuZXh0UnVuT3JkZXI6IG51bWJlcikgPT4gSUFjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGlvbnMucHVzaChmdW4pXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFkZEludm9rZUxhbWJkYUFjdGlvbihsYW1iZGE6IElGdW5jdGlvbiwgcGFyYW1zPzoge1trZXk6IHN0cmluZ106IHVua25vd259KSB7XG5cbiAgICAgICAgdGhpcy5hZGRBY3Rpb24oKF8sIG5leHRSdW5PcmRlcikgPT4gbmV3IExhbWJkYUludm9rZUFjdGlvbih7XG4gICAgICAgICAgICBsYW1iZGE6IGxhbWJkYSxcbiAgICAgICAgICAgIGFjdGlvbk5hbWU6IGBJbnZva2VMYW1iZGFgLFxuICAgICAgICAgICAgdXNlclBhcmFtZXRlcnM6IHBhcmFtcyxcbiAgICAgICAgICAgIHJ1bk9yZGVyOiBuZXh0UnVuT3JkZXJcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBidWlsZCgpIHtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IG5ldyBDZGtQaXBlbGluZSh0aGlzLnNjb3BlLCB0aGlzLmlkLCB7XG4gICAgICAgICAgICBwaXBlbGluZU5hbWU6IHRoaXMuaWQsXG4gICAgICAgICAgICBjbG91ZEFzc2VtYmx5QXJ0aWZhY3Q6IHRoaXMuY2xvdWRBc3NlbWJseUFydGlmYWN0LFxuICAgICAgICAgICAgc291cmNlQWN0aW9uOiB0aGlzLnNvdXJjZUFjdGlvbixcbiAgICAgICAgICAgIHN5bnRoQWN0aW9uOiB0aGlzLnN5bnRoQWN0aW9uLFxuICAgICAgICAgICAgY3Jvc3NBY2NvdW50S2V5czogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgYXBwU3RhZ2UgPSB0aGlzLnBpcGVsaW5lLmFkZEFwcGxpY2F0aW9uU3RhZ2UodGhpcy5zdGFnZSk7XG4gICAgICAgICAgICBhcHBTdGFnZS5uZXh0U2VxdWVudGlhbFJ1bk9yZGVyKClcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucy5mb3JFYWNoKGYgPT4ge1xuICAgICAgICAgICAgICAgIGFwcFN0YWdlLmFkZEFjdGlvbnMoZih0aGlzLnBpcGVsaW5lLCBhcHBTdGFnZS5uZXh0U2VxdWVudGlhbFJ1bk9yZGVyKCkpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXX0=
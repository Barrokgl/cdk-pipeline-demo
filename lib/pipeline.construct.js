"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineConstruct = void 0;
const core_1 = require("@aws-cdk/core");
const aws_codepipeline_1 = require("@aws-cdk/aws-codepipeline");
const aws_codepipeline_actions_1 = require("@aws-cdk/aws-codepipeline-actions");
const pipelines_1 = require("@aws-cdk/pipelines");
const aws_s3_1 = require("@aws-cdk/aws-s3");
const aws_cloudtrail_1 = require("@aws-cdk/aws-cloudtrail");
const aws_codebuild_1 = require("@aws-cdk/aws-codebuild");
class PipelineConstruct {
    constructor(scope, props) {
        this.preDeployActions = [];
        this.actions = [];
        this.scope = scope;
        this.id = props.id;
        this.sourceArtifact = new aws_codepipeline_1.Artifact();
        this.cloudAssemblyArtifact = new aws_codepipeline_1.Artifact();
        this.synthAction = pipelines_1.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: this.sourceArtifact,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            buildCommand: 'npm run build',
            environmentVariables: {
                'STAGE': {
                    type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT,
                    value: props.stage
                }
            }
        });
        return this;
    }
    static of(scope, props) {
        return new PipelineConstruct(scope, props);
    }
    addS3Source({ bucketName, bucketPath }) {
        const bucket = aws_s3_1.Bucket.fromBucketName(this.scope, bucketName, bucketName);
        const trail = new aws_cloudtrail_1.Trail(this.scope, `${this.id}-cloud-trail`);
        trail.addS3EventSelector([{ bucket, objectPrefix: bucket.arnForObjects('*') }], {
            readWriteType: aws_cloudtrail_1.ReadWriteType.WRITE_ONLY,
        });
        // bucket.onCloudTrailPutObject(`${this.id}-event-rule`, {
        //     paths: [bucketPath]
        // });
        this.sourceAction = new aws_codepipeline_actions_1.S3SourceAction({
            actionName: 'S3Source',
            bucketKey: bucketPath,
            bucket: bucket,
            output: this.sourceArtifact,
            trigger: aws_codepipeline_actions_1.S3Trigger.EVENTS,
        });
        return this;
    }
    addGithubRepository({ secretName, owner, repo, branch = 'develop' }) {
        this.sourceAction = new aws_codepipeline_actions_1.GitHubSourceAction({
            actionName: 'GithubSource',
            output: this.sourceArtifact,
            oauthToken: core_1.SecretValue.secretsManager(secretName),
            owner,
            repo,
            branch,
        });
        return this;
    }
    addPreDeployAction(fun) {
        this.preDeployActions.push(fun);
        return this;
    }
    addStage(stage) {
        this.stage = stage;
        return this;
    }
    addAction(fun) {
        this.actions.push(fun);
        return this;
    }
    addInvokeLambdaAction(lambda, params) {
        this.addAction((_, nextRunOrder) => new aws_codepipeline_actions_1.LambdaInvokeAction({
            lambda: lambda,
            actionName: `InvokeLambda`,
            userParameters: params,
            runOrder: nextRunOrder
        }));
        return this;
    }
    build() {
        this.pipeline = new pipelines_1.CdkPipeline(this.scope, this.id, {
            pipelineName: this.id,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            sourceAction: this.sourceAction,
            synthAction: this.synthAction,
        });
        if (this.preDeployActions.length > 0) {
            const preDeploy = this.pipeline.addStage('PreDeploy');
            this.preDeployActions.forEach(f => {
                preDeploy.addActions(f(this.pipeline, preDeploy.nextSequentialRunOrder()));
            });
        }
        if (this.stage !== undefined) {
            const appStage = this.pipeline.addApplicationStage(this.stage);
            appStage.nextSequentialRunOrder();
            this.actions.forEach(f => {
                appStage.addActions(f(this.pipeline, appStage.nextSequentialRunOrder()));
            });
        }
        return this;
    }
}
exports.PipelineConstruct = PipelineConstruct;
//# sourceMappingURL=data:application/json;base64,
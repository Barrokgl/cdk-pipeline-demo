"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineConstruct = void 0;
const core_1 = require("@aws-cdk/core");
const aws_codepipeline_1 = require("@aws-cdk/aws-codepipeline");
const aws_codepipeline_actions_1 = require("@aws-cdk/aws-codepipeline-actions");
const pipelines_1 = require("@aws-cdk/pipelines");
class PipelineConstruct {
    constructor(scope, props) {
        this.preDeployActions = [];
        this.actions = [];
        this.scope = scope;
        this.id = props.id;
        this.sourceArtifact = new aws_codepipeline_1.Artifact();
        this.cloudAssemblyArtifact = new aws_codepipeline_1.Artifact();
        this.synthAction = pipelines_1.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: this.sourceArtifact,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            buildCommand: 'npm run build'
        });
        return this;
    }
    static of(scope, props) {
        return new PipelineConstruct(scope, props);
    }
    addGithubRepository({ secretName, owner, repo, branch = 'develop' }) {
        this.sourceAction = new aws_codepipeline_actions_1.GitHubSourceAction({
            actionName: 'GithubSource',
            output: this.sourceArtifact,
            oauthToken: core_1.SecretValue.secretsManager(secretName),
            owner,
            repo,
            branch,
        });
        return this;
    }
    addPreDeployAction(fun) {
        this.preDeployActions.push(fun);
        return this;
    }
    addStage(stage) {
        this.stage = stage;
        return this;
    }
    addAction(fun) {
        this.actions.push(fun);
        return this;
    }
    addInvokeLambdaAction(lambda, params) {
        this.addAction((_, nextRunOrder) => new aws_codepipeline_actions_1.LambdaInvokeAction({
            lambda: lambda,
            actionName: `InvokeLambda`,
            userParameters: params,
            runOrder: nextRunOrder
        }));
        return this;
    }
    build() {
        this.pipeline = new pipelines_1.CdkPipeline(this.scope, this.id, {
            pipelineName: this.id,
            cloudAssemblyArtifact: this.cloudAssemblyArtifact,
            sourceAction: this.sourceAction,
            synthAction: this.synthAction,
        });
        if (this.preDeployActions.length > 0) {
            const preDeploy = this.pipeline.addStage('PreDeploy');
            this.preDeployActions.forEach(f => {
                preDeploy.addActions(f(this.pipeline, preDeploy.nextSequentialRunOrder()));
            });
        }
        if (this.stage !== undefined) {
            const appStage = this.pipeline.addApplicationStage(this.stage);
            appStage.nextSequentialRunOrder();
            this.actions.forEach(f => {
                appStage.addActions(f(this.pipeline, appStage.nextSequentialRunOrder()));
            });
        }
        return this;
    }
}
exports.PipelineConstruct = PipelineConstruct;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const pipeline = new AWS.CodePipeline({
    region: 'us-east-1',
});
const putJobSuccess = async function (jobId, message, context) {
    const params = {
        jobId
    };
    console.log('pre put jo success');
    await pipeline.putJobSuccessResult(params, function (err, data) {
        console.log('put job success', err, data);
        if (err) {
            context.fail(err);
        }
        else {
            console.log('context success', message);
            context.succeed(message);
        }
    }).promise();
};
const putJobFailure = async function (jobId, message, context) {
    const params = {
        jobId,
        failureDetails: {
            message: JSON.stringify(message),
            type: 'JobFailed',
            externalExecutionId: context.awsRequestId
        }
    };
    await pipeline.putJobFailureResult(params, function (err, data) {
        context.fail(message);
    }).promise();
};
async function handler(event, context) {
    const jobId = event["CodePipeline.job"].id;
    console.log(jobId);
    console.log(JSON.stringify(event["CodePipeline.job"].data.actionConfiguration, undefined, 2));
    await putJobSuccess(jobId, 'success', context);
}
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52b2tlLXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnZva2UtdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFFL0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDO0lBQ2xDLE1BQU0sRUFBRSxXQUFXO0NBQ3RCLENBQUMsQ0FBQztBQUVILE1BQU0sYUFBYSxHQUFHLEtBQUssV0FBVSxLQUFhLEVBQUUsT0FBZSxFQUFFLE9BQWdCO0lBQ2pGLE1BQU0sTUFBTSxHQUFHO1FBQ1gsS0FBSztLQUNSLENBQUM7SUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbEMsTUFBTSxRQUFRLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLFVBQVMsR0FBRyxFQUFFLElBQUk7UUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFMUMsSUFBRyxHQUFHLEVBQUU7WUFDSixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3JCO2FBQU07WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxDQUFBO1lBQ3ZDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDNUI7SUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNqQixDQUFDLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBRyxLQUFLLFdBQVUsS0FBYSxFQUFFLE9BQWUsRUFBRSxPQUFnQjtJQUNqRixNQUFNLE1BQU0sR0FBRztRQUNYLEtBQUs7UUFDTCxjQUFjLEVBQUU7WUFDWixPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7WUFDaEMsSUFBSSxFQUFFLFdBQVc7WUFDakIsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLFlBQVk7U0FDNUM7S0FDSixDQUFDO0lBQ0YsTUFBTSxRQUFRLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLFVBQVMsR0FBRyxFQUFFLElBQUk7UUFDekQsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNqQixDQUFDLENBQUM7QUFFSyxLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQXdCLEVBQUUsT0FBZ0I7SUFDcEUsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU5RixNQUFNLGFBQWEsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQ2xELENBQUM7QUFORCwwQkFNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCwgQ29kZVBpcGVsaW5lRXZlbnQsIENvbnRleHR9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5cbmNvbnN0IHBpcGVsaW5lID0gbmV3IEFXUy5Db2RlUGlwZWxpbmUoe1xuICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScsXG59KTtcblxuY29uc3QgcHV0Sm9iU3VjY2VzcyA9IGFzeW5jIGZ1bmN0aW9uKGpvYklkOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgY29udGV4dDogQ29udGV4dCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgam9iSWRcbiAgICB9O1xuICAgIGNvbnNvbGUubG9nKCdwcmUgcHV0IGpvIHN1Y2Nlc3MnKTtcbiAgICBhd2FpdCBwaXBlbGluZS5wdXRKb2JTdWNjZXNzUmVzdWx0KHBhcmFtcywgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwdXQgam9iIHN1Y2Nlc3MnLCBlcnIsIGRhdGEpO1xuXG4gICAgICAgIGlmKGVycikge1xuICAgICAgICAgICAgY29udGV4dC5mYWlsKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY29udGV4dCBzdWNjZXNzJywgbWVzc2FnZSlcbiAgICAgICAgICAgIGNvbnRleHQuc3VjY2VlZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH0pLnByb21pc2UoKTtcbn07XG5cbmNvbnN0IHB1dEpvYkZhaWx1cmUgPSBhc3luYyBmdW5jdGlvbihqb2JJZDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgIGpvYklkLFxuICAgICAgICBmYWlsdXJlRGV0YWlsczoge1xuICAgICAgICAgICAgbWVzc2FnZTogSlNPTi5zdHJpbmdpZnkobWVzc2FnZSksXG4gICAgICAgICAgICB0eXBlOiAnSm9iRmFpbGVkJyxcbiAgICAgICAgICAgIGV4dGVybmFsRXhlY3V0aW9uSWQ6IGNvbnRleHQuYXdzUmVxdWVzdElkXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGF3YWl0IHBpcGVsaW5lLnB1dEpvYkZhaWx1cmVSZXN1bHQocGFyYW1zLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgICAgY29udGV4dC5mYWlsKG1lc3NhZ2UpO1xuICAgIH0pLnByb21pc2UoKTtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50OiBDb2RlUGlwZWxpbmVFdmVudCwgY29udGV4dDogQ29udGV4dCkge1xuICAgIGNvbnN0IGpvYklkID0gZXZlbnRbXCJDb2RlUGlwZWxpbmUuam9iXCJdLmlkO1xuICAgIGNvbnNvbGUubG9nKGpvYklkKTtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShldmVudFtcIkNvZGVQaXBlbGluZS5qb2JcIl0uZGF0YS5hY3Rpb25Db25maWd1cmF0aW9uLCB1bmRlZmluZWQsIDIpKTtcblxuICAgIGF3YWl0IHB1dEpvYlN1Y2Nlc3Moam9iSWQsICdzdWNjZXNzJywgY29udGV4dClcbn1cbiJdfQ==